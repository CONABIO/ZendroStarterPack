version: "3.2"

services:
  sdb_postgres:
    container_name: zendroStarterPack_postgres
    build:
      context: .
      dockerfile: Dockerfile.postgres
    volumes:
      - sdb_db_data:/var/lib/postgresql/data
    networks:
      - backend

  sdb_science_db_graphql_server:
    container_name: zendroStarterPack_graphql-server
    depends_on:
      - sdb_postgres
    build:
      context: ./graphql-server
      dockerfile: Dockerfile.graphql_server
    environment:
      - PORT=3000
      - NODE_ENV=production
      - LIMIT_RECORDS : "${LIMIT_RECORDS}"
      - ALLOW_ORIGIN: "${ALLOW_ORIGIN}"
      - REQUIRE_SIGN_IN: "${REQUIRE_SIGN_IN}"
      - MAX_TIME_OUT: "${MAX_TIME_OUT}"
      - POST_REQUEST_MAX_BODY_SIZE: "${POST_REQUEST_MAX_BODY_SIZE}"
      - ERROR_LOG: "${ERROR_LOG}"
      - MAIL_SERVICE: "${MAIL_SERVICE}" 
      - MAIL_HOST: "${MAIL_HOST}"
      - MAIL_ACCOUNT: "${MAIL_ACCOUNT}"
      - MAIL_PASSWORD: "${MAIL_PASSWORD}"
      - EXPORT_TIME_OUT: "${EXPORT_TIME_OUT}"
    # Ensure there is enough room to upload large files and store them
    # temporarily in the host system's tempdir:
    volumes:
      - /tmp:/tmp
    networks:
      - backend
    # Await POSTGRES role and DB creation, migrate schema, then start web
    # server:
    command:
      - ./migrateDbAndStartServer.sh

  sdb_nginx:
    depends_on:
      - sdb_postgres
      - sdb_science_db_graphql_server
    build:
      context: ./single-page-app
      dockerfile: Dockerfile.nginx
    #ports:
    #  - 8080:80

volumes:
  sdb_db_data:

networks:
  backend:
