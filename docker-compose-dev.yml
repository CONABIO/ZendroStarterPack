version: "3.2"

services:
  sdb_postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    volumes:
      - sdb_db_data:/var/lib/postgresql/data
    ports:
      - 5432:5432

  sdb_science_db_graphql_server:
    depends_on:
      - sdb_postgres
    build:
      context: ./graphql-server
      dockerfile: Dockerfile.graphql_server
    ports:
      - 3000:3000
    environment:
      - PORT=3000
    volumes:
      - .:/usr/ScienceDbStarterPack
      # Use the Sequelize config adjusted for the Docker setup of ScienceDbStarterPack:
      - ./graphql-server/config/config_postgres_docker.json:/usr/ScienceDbStarterPack/graphql-server/config/config.json
      - sdb_graphql_server_node_modules:/usr/ScienceDbStarterPack/graphql-server/node_modules
    # Await POSTGRES role and DB creation, migrate schema, then start web
    # server:
    command:
      - /bin/sh
      - -c
      - |
        npm install
        ./migrateDbAndStartServer.sh

  sdb_science_db_app_server:
    depends_on:
      - sdb_postgres
      - sdb_science_db_graphql_server
    build:
      context: ./single-page-app
      dockerfile: Dockerfile.app
    ports:
      - 8080:8080
    environment:
      - PORT=8080
    volumes:
      - .:/usr/ScienceDbStarterPack
      - sdb_graphql_server_node_modules:/usr/src/single-page-app/node_modules
    # Link symbolically all non '.*' files or dirs from /opt/app to
    # /usr/src/app. This is done to exclude '.git*' which causes problems when
    # running npm install. Then install dependencies and start
    # single-page-app-server in development mode.
    command:
      - /bin/sh
      - -c
      - |
        npm install
        npm run dev

  sdb_minio:
    image: minio/minio:RELEASE.2019-02-20T22-44-29Z
    volumes:
      - sdb_minio_data:/data
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data

    #sdb_science_db_shiny:
    #bpbuild:
    #bp  context: .
    #bp  dockerfile: Dockerfile.shiny
    #bpenvironment:
    #bp  PORT: 3838
    #bpports:
    #bp  - "3838:3838"
    #bpvolumes:
    #bp  - ./shiny-data-dev:/srv/shiny-server
    #bp#labels:
    #bp#  traefik.enable: "true"
    #bp#  traefik.backend: "science_db_shiny"
    #bp#  traefik.frontend.rule: "Host:shiny.reconstructdb.org"
    #bp#  #traefik.frontend.auth.basic: 'testuser:$$apr1$$QBCuO60R$$pJIFSe2x8L/cTbOBOvoOt1'
    #bp#  traefik.docker.network: "reverseproxy"
    #bp#  traefik.port: "3838"

volumes:
  sdb_db_data:
  sdb_minio_data:
  sdb_graphql_server_node_modules:
  sdb_app_server_node_modules:
  #sdb_shiny_data:
